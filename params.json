{"body":"## JavaScript guidelines\r\n\r\nFork it [there](https://github.com/mlbli/js-guidelines) and send a pull request to add your contribution. \r\n\r\n### General\r\n\r\n* Keep your sources clean and legible. \r\n  * Keep a regular indentation.\r\n  * Keep `\"\"` **OR** `''` but not both.\r\n* Use variable names that make sense.\r\n* Remember that semicolons are **optional** in JavaScript. \r\n  In case you rely on ASI : \r\n    * `;` before new lines starting with `(` & `[`. \r\n* Constructor names should be capitalized.\r\n  \r\n```javascript\r\nfunction Person(name){\r\n  this.name = name\r\n}\r\n```\r\n\r\n* Make your constructors safer (prevent the global object from being modified in case of `new` omission).\r\n\r\n```javascript\r\nfunction Person(name){\r\n  if(!(this instanceof Person)) return new Person(name)\r\n  this.name = name\r\n}\r\n```\r\n\r\n* Declare functions this way for better readability.\r\n\r\n```javascript\r\nfunction name(){}\r\n```\r\n\r\n* Other variables should use a camelized name.\r\n  \r\n```javascript\r\nfunction scrollToElement(){ /* code here */ }\r\n```\r\n\r\n* Use chaining. \r\n\r\n```javascript\r\nmyElement.addClass(\"foo bar\").insert(\"that text\")\r\n```\r\n\r\n* Only use `eval` for `JSON` parsing legacy support.\r\n  \r\n    **NOTE :** Prefer `new Function` constructor over `eval` in that case. \r\n   \r\n* Put methods in `constructor.prototype` instead of putting them directly in the object. \r\n* **NEVER** extend `Object.prototype`. \r\n* Use the less globals you can :\r\n    * Use a namespace if you have a big project or use JSONP and/or flash interactions. \r\n    * Lock scopes with self executing anonymous functions. \r\n* Put your scripts right before `</body>`\r\n* Use a conditionnal `return` statement (as a `continue` or a `break` statement) if the function is not over and you don't need what is following. \r\n\r\n```javascript\r\nfunction foo(bar){\r\n  if(!bar) return\r\n}\r\n```\r\n  \r\n* Don't use `try{}catch(e){}`.\r\n* Use litterals when possible :\r\n  * `[]` instead of `new Array`\r\n    \r\n    **NOTE** : `Array(n)` can be faster if you know exactly how many items you put inside the created array. \r\n  * `{}` instead of `new Object`\r\n  * `\"\"` instead of `new String`\r\n* Use `Array.join()` instead of a loop when it fits your needs. \r\n  \r\n```javascript\r\n\"<ul><li>\" + [\"foo\", \"bar\", \"baz\"].join(\"</li><li>\") + \"</li></ul>\"\r\n```\r\n\r\n* Extend `Array.prototype`, `Function.prototype`, `String.prototype` in order to make your generic methods (`each`, `map`, `filter` ...) cleaner to call. \r\n* Set a variable refering to `this` when using it : keeps the reference clear when changing scope & runs faster. \r\n  \r\n```javascript\r\nfunction foo(){\r\n  var self = this\r\n  // â€¦\r\n}\r\n```\r\n\r\n* Use `Object#hasOwnProperty` to filter methods from properties. \r\n* Don't use a `string` as first argument of `window.setTimeout` or `window.setInterval`.\r\n* Declare variables in the top of a function with one `var`.\r\n* Always check your globals to ensure you didn't forget a `var` statement or a `,`. \r\n* `if`, `for`, `while` without curly braces if a single action is performed. \r\n\r\n```javascript\r\nif(foo){\r\n  bar.call(foo)\r\n}\r\n\r\n// much more clear\r\nif(foo) bar.call(foo)\r\n```\r\n\r\n### DOM\r\n\r\n* Use `documentFragment` to manipulate big amounts of nodes before inserting them inside the actual `document`. \r\n\r\n```javascript\r\nvar fragment = document.createDocumentFragment()\r\n  , i = 0\r\n  , l = 30\r\n  , elementCache\r\n\r\nwhile(i < l){\r\n  elementCache = document.createElement(\"p\")\r\n  elementCache.id = \"element-\" + i\r\n  fragment.appendChild(elementCache)\r\n  i++\r\n}\r\n\r\ndocument.body.appendChild(fragment)\r\n```\r\n\r\n* Use `className` attribute over `style` when possible (moreover, it simplifies maintenance)\r\n\r\n```javascript\r\nmyElement.className += \"active\"\r\n```\r\n  \r\n* Don't repeat yourself (use a `Function#partial` like to reuse a function in different circumstances)\r\n\r\n```javascript\r\nfunction moveTo(direction, amount){\r\n    // some code\r\n    if(direction == 0) amount = -amount\r\n}\r\nvar moveLeft = moveTo.partial(0)\r\n  , moveRight = moveTo.partial(1)\r\n```\r\n  \r\n* Use a `window.setInterval` to limit the functions called when `scroll` event is fired. \r\n\r\n```javascript\r\nvar isScrollActive = false\r\n  , scrollInterval = window.setInterval(function(){\r\n      isScrollActive = false\r\n      // execute handler\r\n    }, n)\r\n\r\nwindow.addEventListener(\"scroll\", function(){\r\n  isScrollActive = true\r\n})\r\n\r\n```\r\n\r\n* Don't make your DOM too deep. \r\n* Use `removeEventListener` and `detachEvent` if you're done with handlers. \r\n* Cache the elements you reuse. \r\n* Be careful with `nodeList` which are dynamic. \r\n* Use `id` attribute when possible to find a unique element (yes, `document.getElementsByClassName(\"slider\")[0]` is less efficient than `document.getElementById(\"slider\")`).\r\n\r\n\r\n","name":"Javascript-guidelines","google":"","tagline":"A few JavaScript guidelines","note":"Don't delete this file! It's used internally to help with page regeneration."}